#include "rpg_quadrotor_integration_test/rpg_quadrotor_integration_test.h"

#include <gtest/gtest.h>
#include <vector>

#include <autopilot/autopilot_states.h>
#include <polynomial_trajectories/polynomial_trajectory_settings.h>
#include <quadrotor_common/control_command.h>
#include <quadrotor_common/geometry_eigen_conversions.h>
#include <std_msgs/Bool.h>
#include <trajectory_generation_helper/heading_trajectory_helper.h>
#include <trajectory_generation_helper/polynomial_trajectory_helper.h>
#include <Eigen/Dense>

namespace rpg_quadrotor_integration_test {

QuadrotorIntegrationTest::QuadrotorIntegrationTest(): 
      executing_trajectory_(false),
      sum_position_error_squared_(0.0),
      max_position_error_(0.0),
      sum_thrust_direction_error_squared_(0.0),
      max_thrust_direction_error_(0.0) {
  ros::NodeHandle nh;

  arm_pub_ = nh.advertise<std_msgs::Bool>("bridge/arm", 1);

  measure_tracking_timer_ =
      nh_.createTimer(ros::Duration(1.0 / kExecLoopRate_),
                      &QuadrotorIntegrationTest::measureTracking, this);
}

QuadrotorIntegrationTest::~QuadrotorIntegrationTest() {}

void QuadrotorIntegrationTest::measureTracking(const ros::TimerEvent& time) {
  if (executing_trajectory_) {
    // Position error
    const double position_error =
        autopilot_helper_.getCurrentPositionError().norm();
    sum_position_error_squared_ += pow(position_error, 2.0);
    if (position_error > max_position_error_) {
      max_position_error_ = position_error;
    }

    // Thrust direction error
    const Eigen::Vector3d ref_thrust_direction =
        autopilot_helper_.getCurrentReferenceOrientation() *
        Eigen::Vector3d::UnitZ();
    const Eigen::Vector3d thrust_direction =
        autopilot_helper_.getCurrentOrientationEstimate() *
        Eigen::Vector3d::UnitZ();

    const double thrust_direction_error =
        acos(ref_thrust_direction.dot(thrust_direction));
    sum_thrust_direction_error_squared_ += pow(thrust_direction_error, 2.0);
    if (thrust_direction_error > max_thrust_direction_error_) {
      max_thrust_direction_error_ = thrust_direction_error;
    }
  }
}

void QuadrotorIntegrationTest::run() {
  ros::Rate command_rate(kExecLoopRate_);

  ros::Duration(5.0).sleep();

  // Arm bridge
  std_msgs::Bool arm_msg;
  arm_msg.data = true;
  arm_pub_.publish(arm_msg);


  ///////////////
  // Check take off
  ///////////////

  // Takeoff for real
  autopilot_helper_.sendStart();


  ///////////////
  // Check go to pose
  ///////////////

  // Send pose command point 1
  const Eigen::Vector3d position_cmd1 = Eigen::Vector3d(0.0, 0.0, 1.5);
  const double heading_cmd1 = 0.0;
  autopilot_helper_.sendPoseCommand(position_cmd1, heading_cmd1);

  // Wait for autopilot to go to got to pose state
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::TRAJECTORY_CONTROL, 2.0, kExecLoopRate_))
      << "Autopilot did not switch to trajectory control because of go to pose "
         "action correctly.";

  // Wait for autopilot to go back to hover
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::HOVER, 10.0, kExecLoopRate_))
      << "Autopilot did not switch back to hover correctly.";

  // Check if we are at the requested pose
  EXPECT_TRUE(
      (autopilot_helper_.getCurrentReferenceState().position - position_cmd1)
          .norm() < 0.01)
      << "Go to pose action did not end up at the right position.";

  EXPECT_TRUE(autopilot_helper_.getCurrentReferenceHeading() - heading_cmd1 <
              0.01)
      << "Go to pose action did not end up at the right heading.";


  // Send pose command point 2
  const Eigen::Vector3d position_cmd2 = Eigen::Vector3d(0.0, 2.0, 1.5);
  const double heading_cmd2 = 0.0;
  autopilot_helper_.sendPoseCommand(position_cmd2, heading_cmd2);

  // Wait for autopilot to go to got to pose state
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::TRAJECTORY_CONTROL, 2.0, kExecLoopRate_))
      << "Autopilot did not switch to trajectory control because of go to pose "
         "action correctly.";

  // Wait for autopilot to go back to hover
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::HOVER, 10.0, kExecLoopRate_))
      << "Autopilot did not switch back to hover correctly.";

  // Check if we are at the requested pose
  EXPECT_TRUE(
      (autopilot_helper_.getCurrentReferenceState().position - position_cmd2)
          .norm() < 0.01)
      << "Go to pose action did not end up at the right position.";

  EXPECT_TRUE(autopilot_helper_.getCurrentReferenceHeading() - heading_cmd2 <
              0.01)
      << "Go to pose action did not end up at the right heading.";


  // Send pose command point 3
  const Eigen::Vector3d position_cmd3 = Eigen::Vector3d(0.0, 2.0, 0.2);
  const double heading_cmd3 = 0.0;
  autopilot_helper_.sendPoseCommand(position_cmd3, heading_cmd3);

  // Wait for autopilot to go to got to pose state
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::TRAJECTORY_CONTROL, 2.0, kExecLoopRate_))
      << "Autopilot did not switch to trajectory control because of go to pose "
         "action correctly.";

  // Wait for autopilot to go back to hover
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::HOVER, 10.0, kExecLoopRate_))
      << "Autopilot did not switch back to hover correctly.";

  // Check if we are at the requested pose
  EXPECT_TRUE(
      (autopilot_helper_.getCurrentReferenceState().position - position_cmd3)
          .norm() < 0.01)
      << "Go to pose action did not end up at the right position.";

  EXPECT_TRUE(autopilot_helper_.getCurrentReferenceHeading() - heading_cmd3 <
              0.01)
      << "Go to pose action did not end up at the right heading.";


  // Send pose command point 4
  const Eigen::Vector3d position_cmd4 = Eigen::Vector3d(0.0, 2.0, 1.5);
  const double heading_cmd4 = 0.0;
  autopilot_helper_.sendPoseCommand(position_cmd4, heading_cmd4);

  // Wait for autopilot to go to got to pose state
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::TRAJECTORY_CONTROL, 2.0, kExecLoopRate_))
      << "Autopilot did not switch to trajectory control because of go to pose "
         "action correctly.";

  // Wait for autopilot to go back to hover
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::HOVER, 10.0, kExecLoopRate_))
      << "Autopilot did not switch back to hover correctly.";

  // Check if we are at the requested pose
  EXPECT_TRUE(
      (autopilot_helper_.getCurrentReferenceState().position - position_cmd4)
          .norm() < 0.01)
      << "Go to pose action did not end up at the right position.";

  EXPECT_TRUE(autopilot_helper_.getCurrentReferenceHeading() - heading_cmd4 <
              0.01)
      << "Go to pose action did not end up at the right heading.";


  // Send pose command point 5
  const Eigen::Vector3d position_cmd5 = Eigen::Vector3d(0.0, 4.0, 1.5);
  const double heading_cmd5 = 0.0;
  autopilot_helper_.sendPoseCommand(position_cmd5, heading_cmd5);

  // Wait for autopilot to go to got to pose state
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::TRAJECTORY_CONTROL, 2.0, kExecLoopRate_))
      << "Autopilot did not switch to trajectory control because of go to pose "
         "action correctly.";

  // Wait for autopilot to go back to hover
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::HOVER, 10.0, kExecLoopRate_))
      << "Autopilot did not switch back to hover correctly.";

  // Check if we are at the requested pose
  EXPECT_TRUE(
      (autopilot_helper_.getCurrentReferenceState().position - position_cmd5)
          .norm() < 0.01)
      << "Go to pose action did not end up at the right position.";

  EXPECT_TRUE(autopilot_helper_.getCurrentReferenceHeading() - heading_cmd5 <
              0.01)
      << "Go to pose action did not end up at the right heading.";


  ///////////////
  // Check landing
  ///////////////

  // Land
  autopilot_helper_.sendLand();

  // Wait for autopilot to go to land
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::LAND, 5.0, kExecLoopRate_))
      << "Autopilot did not switch to land after sending land command within "
         "timeout.";

  // Wait for autopilot to go to off
  EXPECT_TRUE(autopilot_helper_.waitForSpecificAutopilotState(
      autopilot::States::OFF, 20, kExecLoopRate_))
      << "Autopilot did not switch to off after landing within timeout.";

  ///////////////
  // Check sending control commands
  ///////////////

  ros::Duration(50).sleep();

  // Send control command to spin motors
  quadrotor_common::ControlCommand control_command;
  control_command.armed = true;
  control_command.control_mode = quadrotor_common::ControlMode::BODY_RATES;
  control_command.collective_thrust = 10.0;

  ros::Time start_sending_cont_cmds = ros::Time::now();
  while (ros::ok()) {
    autopilot_helper_.sendControlCommandInput(control_command);
    if ((ros::Time::now() - start_sending_cont_cmds) > ros::Duration(0.5)) {
      EXPECT_TRUE((autopilot_helper_.getCurrentAutopilotState() ==
                   autopilot::States::COMMAND_FEEDTHROUGH))
          << "Autopilot did not switch to command feedthrough correctly.";
      break;
    }
    ros::spinOnce();
    command_rate.sleep();
  }

  autopilot_helper_.sendOff();

}

TEST(QuadrotorIntegrationTest, AutopilotFunctionality) {
  QuadrotorIntegrationTest rpg_quadrotor_integration_test;
  rpg_quadrotor_integration_test.run();
}

}  // namespace rpg_quadrotor_integration_test

int main(int argc, char** argv) {
  ::testing::InitGoogleTest(&argc, argv);
  ros::init(argc, argv, "rpg_quadrotor_integration_test");

  return RUN_ALL_TESTS();

}
